;(function (root) {
    'use strict';

    {{#saveJson}}
    /**@amsave*/
    var SAVEJSON = '{{{saveJson}}}';
    {{/saveJson}}

    var trackPlayerGens = [{{{trackPlayerGens}}}];

    root.am = root.am || {};
    root.am.pageScripts = root.am.pageScripts || {};

    var reg = root.am.pageScripts.{{name}} = {
        
        createPlayer: function (opt) {

            var trackPlayers = [];

            trackPlayerGens.forEach(function (create) {

                trackPlayers.push(create(opt))   ;
            });

            return {
                play: callPlayers.bind(null, 'play'),
                pause: callPlayers.bind(null, 'pause'),
                seek: callPlayers.bind(null, 'seek'),
            };

            function callPlayers(fnName, arg1) {

                trackPlayers.forEach(function (trackPlayer) {

                    trackPlayer[fnName].call(null, arg1);
                });
            }
        },
        
        {{#saveJson}}
        saveJson: SAVEJSON,
        {{/saveJson}}
    };


    if (typeof define === 'function' && define.amd) {
        
        define(function () {
            return reg;
        });
    }

    if (typeof exports === 'object') {
        
        module.exports = reg;
    }


    {{#autoPlay}}
    if (document.readyState == 'interactive' || document.readyState == 'complete') {

        reg.createPlayer().play();
    }
    else {
        document.addEventListener('DOMContentLoaded', function () {

            reg.createPlayer().play();
        });
    }
    {{/autoPlay}}




    function CubicBezierEase (c0x, c0y, c1x, c1y) {

        var p = [];

        return new Ease(function (t) {

            p.length = 0;
            p.push(0, 0, c0x, c0y, c1x, c1y, 1, 1);
            
            count(0);
            count(2);
            count(4);
            count(0);
            count(2);
            count(0);

            return p[1];
            
            function count(i) {

                p[i+0] = p[i+0] + (p[i+2] - p[i+0]) * t;
                p[i+1] = p[i+1] + (p[i+3] - p[i+1]) * t;
            }
        });
    }
    
}(this));